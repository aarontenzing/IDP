vocabulary V {
    type Node := {A, B, C, D, E}
    edge: Node * Node -> Bool
    reachable: Node * Node -> Bool
}


structure S : V {
    edge := {(A, B), (A, C), (B, E),
             (C, D), (C, E), (D, E),
             (E, B)}.
}


theory T : V{ 
    {
    !x, y in Node: reachable(y, x) <- edge(x, y). // edge x en y, dan is y reachable vanuit x
    !x, y, z in Node: reachable(y, x) <- edge(z, y) & edge(x, z) & (y ~= x).
    }
}

procedure main() {
    pretty_print(model_expand(T, S))
}