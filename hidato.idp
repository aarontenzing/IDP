vocabulary V {  
    type cell := {0..24}
    type value := {0..25}
    type shifts := {-1..1}

    isValue: (cell) -> value
    startValue: (cell) -> value
    size:  () -> Int
    isRow: cell -> Int
    isColumn: cell -> Int
    isTop: cell -> Bool
    isBottom: cell -> Bool
    isLeft: cell -> Bool
    isRight: cell -> Bool
    isCorrect: cell -> Bool
}

structure S : V {
    size := 5.
    startValue := {0 -> 13, 2 -> 15, 6 -> 25, 7 -> 1, 8 -> 2, 9 -> 18, 11 -> 24, 13 -> 21, 15 -> 10, 17 -> 22, 18 -> 4, 19 -> 20, 20 -> 9, 23 -> 6} else 0.

}

theory T : V {
    !c in cell: isRow(c) = c / size().
    !c in cell: isColumn(c) = c % size().
    {
        !c in cell: isTop(c) <- isRow(c) = 0. // c < size() is hetzelfde
    }
    {
        !c in cell: isBottom(c) <- isRow(c) = size() - 1.
    }
    {
        !c in cell: isLeft(c) <- c % size() = 0.
    }
    {
        !c in cell: isRight(c) <- c % size() = size() - 1.
    }

    {
       !c in cell: isCorrect(c) <-
            ?i, j in shifts:
                (isTop(c) => i >= 0) &
                (isBottom(c) => i < 1) &
                (isLeft(c) => j >= 0) &
                (isRight(c) => j < 1) &
                isValue(c + i * size() + j) = isValue(c) + 1 
        .
    }
    //!c1, c2 in cell: c1 ~= c2 => isValue(c1) ~= isValue(c2). // geen twee dezelfde waarde

    !c in cell: isValue(c) =< size() * size().
    !c in cell: isValue(c) > 0.
    !c in cell: startValue(c) ~= 0 => isValue(c) = startValue(c). 
    !c1, c2 in cell: c1 ~= c2 =>  isValue(c1) ~= isValue(c2).
    
    !c in cell:  isValue(c) < size()*size() => isCorrect(c) .


}

procedure main() {
    pretty_print(model_expand(T, S))
}